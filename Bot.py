from logging import getLogger
import os
import requests
import telebot
import time
import threading

from telebot.util import quick_markup
from background import keep_alive
from telebot import types

BOT_TOKEN = "6754268225:AAFN5qOtXqjMemojBbY0pIHhzJWc1AH1fCI"  # –ó–∞–º—ñ–Ω—ñ—Ç—å —Ü–µ —Å–≤–æ—ó–º —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

genaratus = 5
phone_number = None
myid = [6133407632]
numbon = 0
illo = 0
keys = [
    "sk-a2XTgMvnn3xsbjyqxarwIM141g627uqyh2ixpYi1DbkfSBHt",
    "sk-F2266cS4CWFmuBzgVsY7O7SRiVTBhimVaHOUgvPXZmYV0ixh",
    "sk-Z8cpp04jw5GiPuVcpwNoz35GhLJlpMUbclpqAodFuWYO3lfF",
    "sk-TSYpJALg4B16twcexaoe42jRxf6F791ndKn0EvoLhxE7hY0O",
    "sk-FyLFUvAgxfTxitTnn93lq46VgnCv4oVvK4CoCJIl6gxtBkdQ",
    "sk-lTbrGsGeKw2kIf1dLcbksNqpc8p2xYq4eg1pYE7bARpEy0gj",
    "sk-j7mlko4ial8Qx5S6nA4b9zl0ia885Btu85GCreSp6dXUISAb",
    "sk-PYHffx0JIe2EM75GH2zax6mU5RYb3uz9bjCLdMa86Rbh1PiY",
    "sk-gy3ufunqVTF6TVssRpYjUyop3N0phIBrreGBnt8oEANiW9Dt",
    "sk-INTOAi19LNZ3lpLoIfudOuH5rrct3vsOuKaqExQDnW9H1VoZ",
    "sk-FVlWPqufhMgRN3WzTZoCXKi4IybQrOrIv9YLqX8CMBCoT7lM",
    "sk-WgdoQyjywKeNK1pRQf02FT7AdxqsJiYOGiq3cQn5WxwBvOX2",
    "sk-QCVQ0PVYCbXwEsvGCDqxpjovpBNrHCX3aa8ZPpN2esKTYWue",
    "sk-HLf4j5gLaFDbKRsCAhs0EZT1XZxzJcJJAXgWfoOZe0Byrk0B",
    "sk-t9buh9V5u0lhaWyiugJBRltcEYJnjWZHh9129plouJBwOViQ",
    "sk-nPQfH9RsXvylgwGPH1utUoDfmdJ3xuW7vf9G5n9q3x3VMnHk",
    "sk-1a0qO9YN0EMoIHqS943Z5X2qooyIM3ztqtaFN1oVzQNJzJYX",
    "sk-7wBFp3o5bkfvOXmQDDBo18iXDLtfFplVEplsFUsLvS3tKOe2",
    "sk-9S3eJoU78CwPW74BBaSeJzmeZf9QOEHmCKLSGvXoOcV2u6KK",
    "sk-8aEWXvsOeIUmTZXDO6vzKl6lllbQc6De2iAxPoQyw1M7BCLG",
    "sk-3jEtVIxy83PZdYCcg4eYOVO3ide53A7KJQDYWpHSebW6YDnl",
    "sk-PBhcupWfxvs6gEUZz77wKnpXmrJ7gXvAton47CqCh3GaiMwd",
    "sk-sXIgnZh5TZoQ8U0QKTNNfboXL3Vq3zwtFgTCUFGC5CIq2rvI",
    "sk-LivdKXpYUX24ig48kaY0ZL3RYa54TOlSpp7LQPWZxxn21OzS",
    "sk-5AFzY3keaHV8RaauJbZGunlCdeLT295Z0subZNpz0o0fD0e3"
]

keycode = "sk-SIU50qnpeIFOFGa7G20COSIa9pPxIwAKG6i8ASvy728Njj9d"
keycodeforreserch = "sk-Yp8MZxLGNSwQl1fhbaR4KAp1SwhBJl12CwnRDj4GBgicTFP1"
startuser = []
addpromocodesss = ""
usernameid = ""

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
generations = {}


@bot.message_handler(commands=['gen'])
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
def generate_image(message):
  global genaratus
  user_id = message.from_user.id
  user_d = message.chat.id
  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–æ—Ö –∫–Ω–æ–ø–æ–∫
  button_1 = types.KeyboardButton("–ó–≤–∏—á–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è")
  button_2 = types.KeyboardButton("Search and Replace")
  button_3 = types.KeyboardButton("SDXL diffusion")
  button_4 = types.KeyboardButton("Stable Cascade")
  button_5 = types.KeyboardButton("SDXL-Lightning")
  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –¥–≤–æ–º–∞ —Ä—è–¥–∞–º–∏
  keyboard = types.ReplyKeyboardMarkup(row_width=2)
  keyboard.add(button_1)
  keyboard.add(button_3)
  keyboard.add(button_4)
  keyboard.add(button_5)

  # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏
  if user_id in all_users:
    bot.send_message(message.chat.id,
                     "–í–∏–±–µ—Ä—ñ—Ç—å —è–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏üëá",
                     reply_markup=keyboard)
  elif user_d not in all_users:
    # –ó–∞–ø–∏—Å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ñ–∞–π–ª
    with open("users.txt", "a") as f:
      f.write(f"{user_id}\n")

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É
    all_users.append(user_id)
    bot.send_message(message.chat.id,
                     "–í–∏–±–µ—Ä—ñ—Ç—å —è–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏üëá",
                     reply_markup=keyboard)
  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  if user_id not in generations:
    generations[user_id] = genaratus


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text in [
    "Search and Replace", "–ó–≤–∏—á–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è", "SDXL diffusion",
    "Stable Cascade", "SDXL-Lightning"
])
def handle_buttons(message):
  user_id = message.from_user.id
  user_d = message.chat.id
  if user_id in all_users:
    if message.text == "Search and Replace":
      # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      keyboard_remove = types.ReplyKeyboardRemove()
      bot.send_message(message.chat.id,
                       "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º—ñ–Ω–∏ –æ–±'—î–∫—Ç—Éüëá",
                       reply_markup=keyboard_remove)
      bot.register_next_step_handler(message, handle_search_and_replace)
    elif message.text == "–ó–≤–∏—á–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è":
      # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      keyboard_remove = types.ReplyKeyboardRemove()
      bot.send_message(message.chat.id,
                       "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—óüëá",
                       reply_markup=keyboard_remove)
      bot.register_next_step_handler(message, bumon1)
    elif message.text == "SDXL diffusion":
      # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      keyboard_remove = types.ReplyKeyboardRemove()
      bot.send_message(message.chat.id,
                       "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—óüëá",
                       reply_markup=keyboard_remove)
      bot.register_next_step_handler(message, sdxldiffusion)

    elif message.text == "Stable Cascade":
      # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      keyboard_remove = types.ReplyKeyboardRemove()
      bot.send_message(message.chat.id,
                       "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—óüëá",
                       reply_markup=keyboard_remove)
      bot.register_next_step_handler(message, stablecascade)
    elif message.text == "SDXL-Lightning":
      # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      keyboard_remove = types.ReplyKeyboardRemove()
      bot.send_message(message.chat.id,
                       "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—óüëá",
                       reply_markup=keyboard_remove)
      bot.register_next_step_handler(message, sdxllightning)
  elif user_d not in all_users:
    # –ó–∞–ø–∏—Å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ñ–∞–π–ª
    with open("users.txt", "a") as f:
      f.write(f"{user_id}\n")
  # –î–æ–¥–∞–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É
    all_users.append(user_id)
    handle_buttons(message)


def sdxllightning(message):
  prompt = message.text
  user_id = message.from_user.id
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–∏—à–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π
  if user_id not in generations:
    generations[user_id] = genaratus

  if generations[user_id] <= 0:
    bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.")
    return
  bot.send_message(message.chat.id, "–ü–æ—á–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è...")
  user_id = message.chat.id
  from easygoogletranslate import EasyGoogleTranslate
  translator = EasyGoogleTranslate()
  resut = translator.translate(prompt, target_language='en')
  prompt = resut
  try:
    from gradio_client import Client

    client = Client("cbensimon/Real-Time-Text-to-Image-SDXL-Lightning")
    result = client.predict(
        prompt,  # str  in 'parameter_5' Textbox component
        0,  # float (numeric value between 0 and 12013012031030) in 'Seed' Slider component
        api_name="/predict")
    url = "https://cbensimon-real-time-text-to-image-sdxl-lightning.hf.space/file=" + result
    bot.send_photo(
        message.chat.id,
        url,
        caption=
        f"üí¨Prompt:` {prompt}\n`\nüí∞–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—è ***{generations[user_id] - 1}*** –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.",
        parse_mode="Markdown")
    generations[user_id] -= 1
  except:
    bot.send_message(
        message.chat.id,
        "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –º–æ–∂–ª–∏–≤–æ –≤–∞—à –ø—Ä–æ–º—Ç –ø–æ—Ä—É—à—É—î –Ω–∞—à—ñ –ø—Ä–∞–≤–∏–ª–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–æ–º—Ç —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n–Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏–ª–∞—Å—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞: @RubiGenSupport."
    )


def sdxldiffusion(message):
  prompt = message.text
  user_id = message.from_user.id
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–∏—à–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π
  if user_id not in generations:
    generations[user_id] = genaratus

  if generations[user_id] <= 0:
    bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.")
    return
  bot.send_message(message.chat.id, "–ü–æ—á–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è...")
  user_id = message.chat.id
  from easygoogletranslate import EasyGoogleTranslate
  translator = EasyGoogleTranslate()
  resut = translator.translate(prompt, target_language='en')
  prompt = resut
  try:
    from gradio_client import Client

    client = Client("ahmedemara10/Dremmar-nsfw-xl")
    result = client.predict(
        prompt,  # str  in 'Input' Textbox component
        api_name="/predict")
    url = "https://ahmedemara10-dremmar-nsfw-xl.hf.space/file=" + result
    bot.send_photo(
        message.chat.id,
        url,
        caption=
        f"üí¨Prompt:` {prompt}\n`\nüí∞–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—è ***{generations[user_id] - 1}*** –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.",
        parse_mode="Markdown")
    generations[user_id] -= 1
  except:
    bot.send_message(
        message.chat.id,
        "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –º–æ–∂–ª–∏–≤–æ –≤–∞—à –ø—Ä–æ–º—Ç –ø–æ—Ä—É—à—É—î –Ω–∞—à—ñ –ø—Ä–∞–≤–∏–ª–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–æ–º—Ç —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n–Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏–ª–∞—Å—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞: @RubiGenSupport."
    )


def stablecascade(message):
  prompt = message.text
  user_id = message.from_user.id
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–∏—à–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π
  if user_id not in generations:
    generations[user_id] = genaratus

  if generations[user_id] <= 0:
    bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.")
    return
  bot.send_message(message.chat.id, "–ü–æ—á–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è...")
  user_id = message.chat.id
  from easygoogletranslate import EasyGoogleTranslate
  translator = EasyGoogleTranslate()
  resut = translator.translate(prompt, target_language='en')
  prompt = resut
  try:
    from gradio_client import Client

    client = Client("ddosxd/stable-cascade")
    result = client.predict(
        prompt,  # str  in 'Prompt' Textbox component
        "",  # str  in 'Negative prompt' Textbox component
        0,  # float (numeric value between 0 and 2147483647) in 'Seed' Slider component
        1024,  # float (numeric value between 1024 and 1536) in 'Width' Slider component
        1024,  # float (numeric value between 1024 and 1536) in 'Height' Slider component
        10,  # float (numeric value between 10 and 30) in 'Prior Inference Steps' Slider component
        0,  # float (numeric value between 0 and 20) in 'Prior Guidance Scale' Slider component
        4,  # float (numeric value between 4 and 12) in 'Decoder Inference Steps' Slider component
        0,  # float (numeric value between 0 and 0) in 'Decoder Guidance Scale' Slider component
        1,  # float (numeric value between 1 and 2) in 'Number of Images' Slider component
        api_name="/run")
    url = "https://ddosxd-stable-cascade.hf.space/file=" + result
    bot.send_photo(
        message.chat.id,
        url,
        caption=
        f"üí¨Prompt:` {prompt}\n`\nüí∞–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—è ***{generations[user_id] - 1}*** –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.",
        parse_mode="Markdown")
    generations[user_id] -= 1
  except:
    bot.send_message(
        message.chat.id,
        "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –º–æ–∂–ª–∏–≤–æ –≤–∞—à –ø—Ä–æ–º—Ç –ø–æ—Ä—É—à—É—î –Ω–∞—à—ñ –ø—Ä–∞–≤–∏–ª–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–æ–º—Ç —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n–Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏–ª–∞—Å—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞: @RubiGenSupport."
    )


def handle_search_and_replace(message):
  try:
    # –û—Ç—Ä–∏–º—É—î–º–æ ID —á–∞—Ç—É —Ç–∞ ID —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç —Ñ–æ—Ç–æ –∑–∞ ID
    photo_info = bot.get_file(photo_id)
    photo_file = bot.download_file(photo_info.file_path)
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ –∑ –Ω–∞–∑–≤–æ—é ./husky-in-a-field.png
    with open("./husky-in-a-field.png", 'wb') as new_file:
      new_file.write(photo_file)
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –æ–±'—î–∫—Ç–∞ —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏üëá")
    bot.register_next_step_handler(message, reg_promt_img)
  except Exception as e:
    bot.send_message(message.chat.id,
                     "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


def reg_promt_img(message):
  search_promp = message.text
  bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞ —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏üëá")
  bot.register_next_step_handler(message, reg_promt_img2, search_promp)


def reg_promt_img2(message, search_promp):
  user_id = message.from_user.id
  prompt = message.text
  if user_id not in generations:
    generations[user_id] = genaratus

  if generations[user_id] <= 0:
    bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.")
    return
  bot.send_message(message.chat.id, "–ü–æ—á–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è...")
  try:
    from easygoogletranslate import EasyGoogleTranslate
    translator = EasyGoogleTranslate()
    resut = translator.translate(prompt, target_language='en')
    prompt = resut
    translator = EasyGoogleTranslate()
    resut = translator.translate(search_promp, target_language='en')
    search_promp = resut

    global keycodeforreserch

    response = requests.post(
        f"https://api.stability.ai/v2beta/stable-image/edit/search-and-replace",
        headers={
            "authorization": keycodeforreserch,
            "accept": "image/*"
        },
        files={"image": open("./husky-in-a-field.png", "rb")},
        data={
            "prompt": prompt,
            "search_prompt": search_promp,
            "output_format": "webp",
        },
    )

    if response.status_code == 200:
      with open("./golden-retriever-in-a-field.webp", 'wb') as file:
        file.write(response.content)
    else:
      raise Exception(str(response.json()))

    url = open('./golden-retriever-in-a-field.webp', 'rb')
    bot.send_photo(
        message.chat.id,
        url,
        caption=
        f"üí¨Prompt:` {prompt}\n`üí¨Search prompt: `{search_promp}`\n\nüí∞–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—è ***{generations[user_id] - 1}*** –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.",
        parse_mode="Markdown")
    generations[user_id] -= 1
  except:
    bot.send_message(
        message.chat.id,
        "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –º–æ–∂–ª–∏–≤–æ –≤–∞—à –ø—Ä–æ–º—Ç –ø–æ—Ä—É—à—É—î –Ω–∞—à—ñ –ø—Ä–∞–≤–∏–ª–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–æ–º—Ç —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n–Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏–ª–∞—Å—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞: @RubiGenSupport."
    )


def bumon1(message):
  prompt = message.text
  user_id = message.from_user.id
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–∏—à–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π
  if user_id not in generations:
    generations[user_id] = genaratus

  if generations[user_id] <= 0:
    bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.")
    return
  bot.send_message(message.chat.id, "–ü–æ—á–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è...")
  user_id = message.chat.id
  from easygoogletranslate import EasyGoogleTranslate
  translator = EasyGoogleTranslate()
  resut = translator.translate(prompt, target_language='en')
  prompt = resut
  try:
    from gradio_client import Client

    client = Client("mexicanamerican/dalle-3-xl-lora-v2")
    result = client.predict(
		prompt,	# str in 'Prompt' Textbox component
		"(deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, (mutated hands and fingers:1.4), disconnected limbs, mutation, mutated, ugly, disgusting, blurry, amputation, (NSFW:1.25)",	# str in 'Negative prompt' Textbox component
		True,	# bool in 'Use negative prompt' Checkbox component
		0,	# float (numeric value between 0 and 2147483647)
								#in 'Seed' Slider component
		1024,	# float (numeric value between 512 and 2048)
								#in 'Width' Slider component
		1024,	# float (numeric value between 512 and 2048)
								#in 'Height' Slider component
	  6.0,	# float (numeric value between 0.1 and 20.0)
								#in 'Guidance Scale' Slider component
		True,	# bool in 'Randomize seed' Checkbox component
		api_name="/run"
)
    my_string= str(result)
    start_marker = "/tmp/gradio/"
    end_marker = ".png"
    extracted_value = my_string.split(start_marker)[1].split(end_marker)[0]

# –ü–æ–º–µ—â–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    codemmm = extracted_value

    url = "https://mexicanamerican-dalle-3-xl-lora-v2.hf.space/file=" + "/tmp/gradio/" + codemmm + ".png"

    # –í–∏–¥–∞–ª—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –≤–∞—à –±–æ—Ç –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —É —á–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    bot.send_photo(
        message.chat.id,
        url,
        caption=
        f"üí¨–ü—Ä–æ–º—Ç:` {prompt}\n`\nüí∞–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—è ***{generations[user_id] - 1}*** –ø–æ–≤—ñ–ª—å–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.",
        parse_mode="Markdown")
    generations[user_id] -= 1
  except:
    bot.send_message(
        message.chat.id,
        "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –º–æ–∂–ª–∏–≤–æ –≤–∞—à –ø—Ä–æ–º—Ç –ø–æ—Ä—É—à—É—î –Ω–∞—à—ñ –ø—Ä–∞–≤–∏–ª–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–æ–º—Ç —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n–Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏–ª–∞—Å—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞: @RubiGenSupport."
    )

# –ó–º–µ–Ω—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π


def help(message):
  bot.send_message(
      message.chat.id,
      "–Ø RubiGen, –º–æ–∂—É –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ —ó—Ö –æ–ø–∏—Å—É.\n\n–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –ö–∞–Ω–∞–ª RubiGen: @RubiGenChanel.\n–ß–∞—Ç RubiGen: @RubiGenChat - –¢–∞–º —Ä–æ–∑–¥–∞—é—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å.\n\n–ö–æ–º–∞–Ω–¥–∏:\n/buy - ‚ù§–ö—É–ø–∏—Ç–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞ RubiGen‚ù§\n/gen - –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n/help - –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –∫–æ–º–∞–Ω–¥–∏.\n/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å.\n/promo - –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥.\n/promter - (BETA) –ü–æ–∫—Ä–∞—â–∏–∏—Ç–∏ –ø—Ä–æ–º—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é PROmter.\n/ref - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–∏—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n\n*new:\n/gpt - –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è gpt.\n/qwen - –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è Qwen.\n/llama - –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è Llama 3.\n\n–ó–∞ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ —Ç–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –∞–¥–º—ñ–Ω–∞: @RubiGenSupport.\n"
  )


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–∏—à–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π
def check_generations(message):
  user_id = message.chat.id
  global generations
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  if user_id not in generations:
    generations[user_id] = genaratus

  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ª–∏—à–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π
  bot.send_message(
      message.chat.id,
      f"üí∞–ù–∞—Ä–∞–∑—ñ —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ: ***{generations[user_id]}*** –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.",
      parse_mode="Markdown")


# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
bot.register_message_handler(check_generations, commands=['balance'])
bot.register_message_handler(help, commands=['help'])

all_users = []


@bot.message_handler(commands=['llama'])
def llama_chat(message):
  bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–æ Llamaüëá")
  bot.register_next_step_handler(message, gpt_send)


def llama_send(message):
  text_to_gpt = message.text
  bot.send_message(message.chat.id, "üí¨–í—ñ–¥–ø–æ–≤—ñ–¥–∞—é...")
  from gradio_client import Client

  client = Client("ysharma/Chat_with_Meta_llama3_8b")
  result = client.predict(message=text_to_gpt,
                          request=0.95,
                          param_3=512,
                          api_name="/chat")
  answer_gpt = result
  bot.send_message(message.chat.id, answer_gpt, parse_mode="Markdown")


@bot.message_handler(commands=['send'])
def send_m(message):
  if message.chat.id == 6133407632:
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")
    bot.register_next_step_handler(message, send_message_to_users)
  else:
    bot.send_message(message.chat.id, "Error: you not admin")


def send_message_to_users(message):
  message_text = message.text
  for user_id in all_users:
    bot.send_message(user_id, message_text)


@bot.message_handler(commands=['add'])
def add_api_key(message):
  if message.chat.id == 6133407632:
    global keys
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á:")
    bot.register_next_step_handler(message, add_key)
  else:
    return


def add_key(message):
  global numbon
  global keys
  key = message.text
  keys.append(key)
  bot.send_message(
      message.chat.id,
      f"–ö–ª—é—á –¥–æ–¥–∞–Ω–æ.\n\n–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å {numbon} –ø—Ä–∞—Ü—é—é—á–∏—Ö –∫–ª—é—á—ñ–≤\n\n\n–ö–ª—é—á—ñ:\n"
      + "\n".join(keys))


# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
promocodes = []

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
activated_promocodes = {}


@bot.message_handler(commands=["promo"])
def promo_handler(message: types.Message):
  global genaratus
  user_id = message.chat.id
  if generations[user_id] > genaratus:
    bot.send_message(
        message.chat.id,
        f"–í–∏ –Ω–µ –º–æ–∂–∏—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –Ω—ñ—è–∫—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏, —Ç–æ–º—É —â–æ: –ø—Ä–æ–º–æ–∫–æ–¥–∏ –≤—ñ–¥–Ω–æ–≤–ª—é—é—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å, –∞ —É –≤–∞—Å –Ω–∞—Ä–∞–∑—ñ –±—ñ–ª—å—à–µ –Ω—ñ–∂ ***{genaratus}*** –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.",
        parse_mode="Markdown")
    return
  try:
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = message.text.split(' ')[1]
  except:
    bot.send_message(
        message.chat.id,
        "–í–≤–æ–¥—å—Ç–µ –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ: \n/promo code, –Ω–∞ –º—ñ—Å—Ç—ñ \"code\" –≤—Å—Ç–∞–≤—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥."
    )
    return
  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤—É–≤–∞–≤ –ø—Ä–æ–º–æ–∫–æ–¥
  if text in activated_promocodes.get(user_id, []):
    bot.send_message(message.chat.id, "–í–∏ –≤–∂–µ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥.")
    return

  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–≤–µ–¥–µ–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥—ñ–π—Å–Ω–∏–π
  if text not in promocodes:
    bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥.")
    return

  # –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–æ–º–æ–∫–æ–¥—É
  activated_promocodes.setdefault(user_id, []).append(text)
  bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")
  generations[user_id] = genaratus

  # –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó –ø—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ–º–æ–∫–æ–¥—É,
  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞–¥–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏, –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–æ—â–æ.


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ start

addpromocodesss = ""


@bot.message_handler(commands=['addpromo'])
def naigfd(message):
  if message.chat.id == 6133407632:
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä–æ–º–æ–∫–æ–¥:")
    bot.register_next_step_handler(message, send_messall)
  else:
    bot.send_message(message.chat.id, "Error: you not admin")


def send_messall(message):
  global addpromocodesss
  addpromocodesss = message.text
  bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–¥–∞–Ω–æ")
  promocodes.append(addpromocodesss)


userbuyid = ""
usertelegids = []


@bot.message_handler(commands=['buy'])
def add_buy_user(message):
  global usertelegids
  user_d = message.chat.id
  if user_d == 6133407632:
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º id –Ω–æ–≤–æ–≥–æ premium –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    bot.register_next_step_handler(message, next_add_buy)
  else:
    bot.send_message(
        message.chat.id,
        f"Premium –ø—ñ–¥–ø–∏—Å–∫–∞ RubiGen Basic - –í–∫–ª—é—á–∞—î –≤ —Å–µ–±–µ: ***100*** –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π —Ç–∞ –≤–µ–ª–∏–∫—É –Ω–∞—à—É –ø–æ–¥—è–∫—É.\n\n–©–æ–± –∫—É–ø–∏—Ç–∏ Premium –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ 100–≥—Ä–Ω –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: `5375414122338071`\n–ó –æ—Å—å —Ç–∞–∫–∏–º –æ–ø–∏—Å–æ–º: `–û–ø–ª–∞—Ç–∞ –∑–∞ Premium Basic: {message.chat.id}`\n\n–ü—ñ—Å–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤–∞–º –ø—Ä–∏–π–¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.\n\n–Ø–∫—â–æ –≤–∏ —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏ –≤–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É —Ç–æ–¥—ñ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞: @RubiGenSupport.",
        parse_mode="Markdown")


def next_add_buy(message):
  global usertelegids
  global userbuyid
  userbuyid = message.text
  usertelegids.append(userbuyid)
  bot.send_message(
      message.chat.id,
      f"Premium –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º id: `{userbuyid}` –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.",
      parse_mode="Markdown")
  try:
    typeint = int(userbuyid)
    generations[typeint] = 100
    bot.send_message(
        userbuyid,
        f"üéâ–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!\n\nüí¨–í–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: ***{generations[typeint]}*** –≥–µ–Ω–µ—Ä–∞—Ü—ñ–πüí¨\n\n‚ô•Ô∏è–î—è–∫—É—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –Ω–∞—à–∏–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º‚ô•Ô∏è",
        parse_mode="Markdown")
  except:
    bot.send_message(
        message.chat.id,
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º id: `{userbuyid}`, –Ω–µ–º–∞—î –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞.",
        parse_mode="Markdown")


@bot.message_handler(commands=["ref"])
def send_refrence(message):
  bot.send_message(
      message.chat.id,
      f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞:\n\nüí° –¢–≤–æ—ó–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –≤–≤–∞–∂–∞—î—Ç—å—Å—è –±—É–¥—å-—è–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–∏–π —É–ø–µ—Ä—à–µ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n\nüîó–í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: `https://t.me/imagenerabot?start={message.chat.id}`\n\n–ó–∞ –∫–æ–∂–Ω—É –ª—é–¥–∏–Ω—É —è–∫–∞ –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –ø–æ –≤–∞—à–æ–º—É –ø–æ—Å–∏–ª–∞–Ω—é, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ 10 –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.",
      parse_mode="Markdown")


@bot.message_handler(commands=["start"])
def send_awesome(message):
  user_d = message.chat.id
  user_id = message.from_user.id
  try:
    text = message.text.split(' ')[1]
  except:
    if user_id in all_users:
      bot.reply_to(
          message,
          f"–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É RubiGen —è–∫–∏–π –º–æ–∂–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n–£ –≤–∞—Å —à–≤–∏–¥–∫—ñ—Å–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π —Ç–∞ {genaratus} –ø–æ–≤—ñ–ª—å–Ω–∏—Ö.\n\n–ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ –Ω–∞—à–æ–≥–æ <a href=\"https://t.me/RubiGenChat\">—á–∞—Ç—É</a> —Ç–∞ <a href=\"https://t.me/RubiGenChanel\">–∫–∞–Ω–∞–ª—É</a>.\n–ê –ø–æ—Ç—ñ–º –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help.",
          parse_mode="HTML")
    elif user_d not in all_users:
      # –ó–∞–ø–∏—Å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á600–∞ –≤ —Ñ–∞–π–ª
      with open("users.txt", "a") as f:
        f.write(f"{user_id}\n")

      # –î–æ–¥–∞–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É
      all_users.append(user_id)
      bot.reply_to(
          message,
          f"–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É RubiGen —è–∫–∏–π –º–æ–∂–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n–£ –≤–∞—Å {genaratus}  –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.\n\n–ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ –Ω–∞—à–æ–≥–æ <a href=\"https://t.me/RubiGenChat\">—á–∞—Ç—É</a> —Ç–∞ <a href=\"https://t.me/RubiGenChanel\">–∫–∞–Ω–∞–ª—É</a>.\n–ê –ø–æ—Ç—ñ–º –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help.",
          parse_mode="HTML")
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in generations:
      generations[user_id] = genaratus
    return
  idus = f"{message.chat.id}"
  if idus == text:
    bot.send_message(
        message.chat.id,
        "–¶–µ –≤–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏!")
    all_users.append(user_id)
    return

  else:
    if user_id in all_users:
      bot.send_message(
          message.chat.id,
          "–í–∏ –≤–∂–µ —î –Ω–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —ñ–Ω—à–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!")
      all_users.append(user_id)
    else:
      try:
        bot.send_message(
            text,
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–π—à–æ–≤ –ø–æ –≤–∞—à–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—é, –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ ***10*** –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.",
            parse_mode="Markdown")
        typeint = int(text)
        generations[typeint] = 10
        bot.send_message(
            message.chat.id,
            "–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–∞–ª–∏ —Ä–µ—Ñ–∏—Ä–∞–ª–æ–º —Å—Ç–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º, –¥—è–∫—É—î–º–æ –≤–∞–º.")
        if user_id in all_users:
          bot.reply_to(
              message,
              f"–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É RubiGen —è–∫–∏–π –º–æ–∂–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n–£ –≤–∞—Å {genaratus} –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.\n\n–ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ –Ω–∞—à–æ–≥–æ <a href=\"https://t.me/RubiGenChat\">—á–∞—Ç—É</a> —Ç–∞ <a href=\"https://t.me/RubiGenChanel\">–∫–∞–Ω–∞–ª—É</a>.\n–ê –ø–æ—Ç—ñ–º –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help.",
              parse_mode="HTML")
        elif user_d not in all_users:
          # –ó–∞–ø–∏—Å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ñ–∞–π–ª
          with open("users.txt", "a") as f:
            f.write(f"{user_id}\n")

          # –î–æ–¥–∞–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É
          all_users.append(user_id)
          bot.reply_to(
              message,
              f"–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É RubiGen —è–∫–∏–π –º–æ–∂–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n–£ –≤–∞—Å {genaratus} –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.\n\n–ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ –Ω–∞—à–æ–≥–æ <a href=\"https://t.me/RubiGenChat\">—á–∞—Ç—É</a> —Ç–∞ <a href=\"https://t.me/RubiGenChanel\">–∫–∞–Ω–∞–ª—É</a>.\n–ê –ø–æ—Ç—ñ–º –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help.",
              parse_mode="HTML")
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id not in generations:
          generations[user_id] = genaratus

      except:
        if user_id in all_users:
          bot.reply_to(
              message,
              f"–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É RubiGen —è–∫–∏–π –º–æ–∂–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n–£ –≤–∞—Å {genaratus} –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.\n\n–ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ –Ω–∞—à–æ–≥–æ <a href=\"https://t.me/RubiGenChat\">—á–∞—Ç—É</a> —Ç–∞ <a href=\"https://t.me/RubiGenChanel\">–∫–∞–Ω–∞–ª—É</a>.\n–ê –ø–æ—Ç—ñ–º –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help.",
              parse_mode="HTML")
        elif user_d not in all_users:
          # –ó–∞–ø–∏—Å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ñ–∞–π–ª
          with open("users.txt", "a") as f:
            f.write(f"{user_id}\n")

          # –î–æ–¥–∞–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É
          all_users.append(user_id)
          bot.reply_to(
              message,
              f"–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É RubiGen —è–∫–∏–π –º–æ–∂–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n–£ –≤–∞—Å {genaratus} –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.\n\n–ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ –Ω–∞—à–æ–≥–æ <a href=\"https://t.me/RubiGenChat\">—á–∞—Ç—É</a> —Ç–∞ <a href=\"https://t.me/RubiGenChanel\">–∫–∞–Ω–∞–ª—É</a>.\n–ê –ø–æ—Ç—ñ–º –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help.",
              parse_mode="HTML")
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id not in generations:
          generations[user_id] = genaratus

    # –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó –ø—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ–º–æ–∫–æ–¥—É,
    # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞–¥–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏, –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–æ—â–æ.


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ start


@bot.message_handler(commands=['gpt'])
def gpt(message):
  bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–æ chat gptüëá")
  bot.register_next_step_handler(message, gpt_send)


def gpt_send(message):
  text_to_gpt = message.text
  bot.send_message(message.chat.id, "üí¨–í—ñ–¥–ø–æ–≤—ñ–¥–∞—é...")
  from g4f.client import Client

  client = Client()
  response = client.chat.completions.create(
      model="gpt-3.5-turbo",
      messages=[{
          "role": "user",
          "content": text_to_gpt
      }],
  )
  answer_gpt = response.choices[0].message.content
  bot.send_message(message.chat.id, answer_gpt, parse_mode="Markdown")


@bot.message_handler(commands=['qwen'])
def qwen(message):
  bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–æ Qwenüëá")
  bot.register_next_step_handler(message, qwen_send)


def qwen_send(message):
  text_to_qwen = message.text
  bot.send_message(message.chat.id, "üí¨–í—ñ–¥–ø–æ–≤—ñ–¥–∞—é...")
  from gradio_client import Client
  client = Client("Qwen/Qwen1.5-32B-Chat-demo")
  result = client.predict(query=text_to_qwen,
                          history=[],
                          system="You helpful assistant Qwen",
                          api_name="/model_chat")
  writed_prompt = result[1][0][1]
  bot.send_message(message.chat.id, writed_prompt, parse_mode="Markdown")


@bot.message_handler(commands=['promter'])
def beta_promter(message):
  bot.send_message(
      message.chat.id,
      "‚Äº–£–≤–∞–≥–∞‚Äº\n–ù–∞—Ä–∞–∑—ñ ***PROmter*** —Ü–µ ***BETA*** –≤–µ—Ä—Å—ñ—è, —ñ–Ω–æ–¥—ñ –º–æ–∂–µ –¥–∞–≤–∞—Ç–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏!\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø—Ä–æ–º—Ç –±—É–¥—å —è–∫–æ—é –º–æ–≤–æ—é, –∞ —è —Å–ø—Ä–æ–±—É—é –π–æ–≥–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏üëá",
      parse_mode="Markdown")
  bot.register_next_step_handler(message, promter)


def promter(message):
  chat_text = message.text
  bot.send_message(
      message.chat.id,
      "PROmter –∑–∞—Ä–∞–∑ –∑–∞–π–º–∞—î—Ç—å—Å—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º –≤–∞—à–æ–≥–æ –ø—Ä–æ–º—Ç—É, –∑–∞–∑–≤–∏—á–∞–π —Ü–µ —Ç—Ä–∏–≤–∞—î –¥–æ 35 —Å–µ–∫—É–Ω–¥."
  )
  from easygoogletranslate import EasyGoogleTranslate
  translator = EasyGoogleTranslate()
  resut = translator.translate(chat_text, target_language='en')

  chat_text = resut
  from gradio_client import Client
  client = Client("Qwen/Qwen1.5-32B-Chat-demo")
  result = client.predict(
      query=chat_text,
      history=[],
      system=
      "Enhance the prompt provided by the user for generating images, adding more details and improving it. Return only the improved prompt without any unnecessary words or punctuation marks.",
      api_name="/model_chat")

  # –í–∏–≤–æ–¥–∏—Ç–∏ –ª–∏—à–µ –¥—Ä—É–≥–µ –∑–Ω–∞—á–µ–Ω–Ω—è (—Ä–µ–ø–ª—ñ–∫—É –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞)
  writed_prompt = result[1][0][1]
  bot.send_message(
      message.chat.id,
      f"\****–ü–æ–∫—Ä–∞—â–∞–Ω–Ω–∏–π –ø—Ä–æ–º—Ç***: `{writed_prompt}`\n\n\* - —ñ–Ω–æ–¥—ñ PROmter –º–æ–∂–µ –Ω–∞–≤–ø–∞–∫–∏, –ø–æ–≥—ñ—Ä—à–∏—Ç–∏ –ø—Ä–æ–º—Ç.\n\n\n–ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –∫–∞–Ω–∞–ª—É RubiGen —â–æ–± –±–∞—á–∏—Ç–∏ –±—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: https://t.me/RubiGenChanel",
      parse_mode="Markdown")


keep_alive()



# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ
def my_dfggsdfgdsfgdfg():
  while True:
    print("None stope this functhion!")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
thread = threading.Thread(target=my_dfggsdfgdsfgdfg)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
thread.start()

while True:
  try:
    bot.polling(none_stop=True)
  except Exception as e:
    bot.send_message(6133407632, f"–ü–æ–º–∏–ª–∫–∞: {e}")
    time.sleep(1)
